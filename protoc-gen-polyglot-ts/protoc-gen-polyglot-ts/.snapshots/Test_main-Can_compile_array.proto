(string) (len=3013) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: array.proto\n\n\n\nimport { Kind,decodeArray,decodeInt32,decodeString,encodeArray,encodeInt32,encodeString,} from \"polyglot-ts\"\n\n\n\n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestDataArrayExampleMessage {\n        constructor(\n        name: string,\n        addresses: string[],\n        balances: number[],\n        ) {\n            this._name = name\n            this._addresses = addresses\n            this._balances = balances\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        private _addresses: string[]\n\n            get addresses(): string[] {\n                return this._addresses\n            }\n\n            set addresses(addresses: string[]) {\n                this._addresses = addresses\n            }\n            \n        private _balances: number[]\n\n            get balances(): number[] {\n                return this._balances\n            }\n\n            set balances(balances: number[]) {\n                this._balances = balances\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n\n        \n    encoded = encodeArray(this._addresses.length, Kind.String)\n        this._addresses.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        encoded = encodeArray(this._balances.length, Kind.Int32)\n        this._balances.forEach((field) => {\n            encoded = encodeInt32(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataArrayExampleMessage} {\n        let decoded = buf\n        \n        \n            let addresses = decodeArray(decoded)\n            decoded = addresses.buf\n            const addressesTemp: { value: string[] } = { value: [] }\n            for (let i = 0; i < addresses.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                addressesTemp.value.push(element.value)\n            }\n        \n            let balances = decodeArray(decoded)\n            decoded = balances.buf\n            const balancesTemp: { value: number[] } = { value: [] }\n            for (let i = 0; i < balances.size; i++) {\n                let element = decodeInt32(decoded)\n                    decoded = element.buf\n                balancesTemp.value.push(element.value)\n            }\n        \n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataArrayExampleMessage(\n            nameTemp.value,\n            addressesTemp.value,\n            balancesTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
