(string) (len=3290) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: map.proto\n\n\n\nimport { Kind,decodeFloat64,decodeInt32,decodeMap,decodeString,encodeFloat64,encodeInt32,encodeMap,encodeString,} from \"polyglot-ts\"\n\n\n\n\n\n    \n    \n    \n        \n        \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestDataMapExampleMessage {\n        constructor(\n        name: string,\n        balances: Map<string, number>,\n        backlinks: Map<string, number>,\n        ) {\n            this._name = name\n            this._balances = balances\n            this._backlinks = backlinks\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        private _balances: Map<string, number>\n\n            get balances(): Map<string, number> {\n                return this._balances\n            }\n\n            set balances(balances: Map<string, number>) {\n                this._balances = balances\n            }\n            \n        private _backlinks: Map<string, number>\n\n            get backlinks(): Map<string, number> {\n                return this._backlinks\n            }\n\n            set backlinks(backlinks: Map<string, number>) {\n                this._backlinks = backlinks\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n\n        \n    encoded = encodeMap(encoded, this._balances.size, Kind.String, Kind.Int32)\n            this._balances.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeInt32(encoded, v)\n                })\n        encoded = encodeMap(encoded, this._backlinks.size, Kind.String, Kind.F64)\n            this._backlinks.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeFloat64(encoded, v)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataMapExampleMessage} {\n        let decoded = buf\n        \n        \n            \n\n\nlet balances = decodeMap(decoded)\ndecoded = balances.buf\nconst balancesTemp: { value: Map<string,number> } = { value: new Map() }\nfor (let i = 0; i < balances.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeInt32(decoded)\n        decoded = value.buf\n    \n\n    balances.value.set(key, value)\n}\n\n            \n\n\nlet backlinks = decodeMap(decoded)\ndecoded = backlinks.buf\nconst backlinksTemp: { value: Map<string,number> } = { value: new Map() }\nfor (let i = 0; i < backlinks.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeFloat64(decoded)\n        decoded = value.buf\n    \n\n    backlinks.value.set(key, value)\n}\n\n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataMapExampleMessage(\n            nameTemp.value,\n            balancesTemp.value,\n            backlinksTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
