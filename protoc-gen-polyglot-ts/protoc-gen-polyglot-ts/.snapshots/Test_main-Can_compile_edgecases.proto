(string) (len=6784) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: edgecases.proto\n\n\n\nimport { Kind,decodeArray,decodeBoolean,decodeBytes,decodeInt64,decodeMap,decodeString,encodeArray,encodeBoolean,encodeBytes,encodeInt64,encodeMap,encodeString,} from \"polyglot-ts\"\n\n\n\n\n\n    \n    \n    \n        \n        \n    \n        \n        \n    \n        \n        \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestDataEdgecasesExampleMessage {\n        constructor(\n        a: number[],\n        b: boolean[],\n        c: Uint8Array[],\n        d: Map<string, number>,\n        e: Map<string, boolean>,\n        f: Map<string, string>,\n        g: Map<string, Uint8Array>,\n        ) {\n            this._a = a\n            this._b = b\n            this._c = c\n            this._d = d\n            this._e = e\n            this._f = f\n            this._g = g\n            }\n\n        private _a: number[]\n\n            get a(): number[] {\n                return this._a\n            }\n\n            set a(a: number[]) {\n                this._a = a\n            }\n            \n        private _b: boolean[]\n\n            get b(): boolean[] {\n                return this._b\n            }\n\n            set b(b: boolean[]) {\n                this._b = b\n            }\n            \n        private _c: Uint8Array[]\n\n            get c(): Uint8Array[] {\n                return this._c\n            }\n\n            set c(c: Uint8Array[]) {\n                this._c = c\n            }\n            \n        private _d: Map<string, number>\n\n            get d(): Map<string, number> {\n                return this._d\n            }\n\n            set d(d: Map<string, number>) {\n                this._d = d\n            }\n            \n        private _e: Map<string, boolean>\n\n            get e(): Map<string, boolean> {\n                return this._e\n            }\n\n            set e(e: Map<string, boolean>) {\n                this._e = e\n            }\n            \n        private _f: Map<string, string>\n\n            get f(): Map<string, string> {\n                return this._f\n            }\n\n            set f(f: Map<string, string>) {\n                this._f = f\n            }\n            \n        private _g: Map<string, Uint8Array>\n\n            get g(): Map<string, Uint8Array> {\n                return this._g\n            }\n\n            set g(g: Map<string, Uint8Array>) {\n                this._g = g\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeArray(this._a.length, Kind.I64)\n        this._a.forEach((field) => {\n            encoded = encodeInt64(encoded, field)\n        })\n        encoded = encodeArray(this._b.length, Kind.Bool)\n        this._b.forEach((field) => {\n            encoded = encodeBoolean(encoded, field)\n        })\n        encoded = encodeArray(this._c.length, Kind.Bytes)\n        this._c.forEach((field) => {\n            encoded = encodeBytes(encoded, field)\n        })\n        \n    encoded = encodeMap(encoded, this._d.size, Kind.String, Kind.I64)\n            this._d.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeInt64(encoded, v)\n                })\n        encoded = encodeMap(encoded, this._e.size, Kind.String, Kind.Bool)\n            this._e.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeBoolean(encoded, v)\n                })\n        encoded = encodeMap(encoded, this._f.size, Kind.String, Kind.String)\n            this._f.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeString(encoded, v)\n                })\n        encoded = encodeMap(encoded, this._g.size, Kind.String, Kind.Bytes)\n            this._g.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeBytes(encoded, v)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataEdgecasesExampleMessage} {\n        let decoded = buf\n        \n        \n            let a = decodeArray(decoded)\n            decoded = a.buf\n            const aTemp: { value: number[] } = { value: [] }\n            for (let i = 0; i < a.size; i++) {\n                let element = decodeInt64(decoded)\n                    decoded = element.buf\n                aTemp.value.push(element.value)\n            }\n        \n            let b = decodeArray(decoded)\n            decoded = b.buf\n            const bTemp: { value: boolean[] } = { value: [] }\n            for (let i = 0; i < b.size; i++) {\n                let element = decodeBoolean(decoded)\n                    decoded = element.buf\n                bTemp.value.push(element.value)\n            }\n        \n            let c = decodeArray(decoded)\n            decoded = c.buf\n            const cTemp: { value: Uint8Array[] } = { value: [] }\n            for (let i = 0; i < c.size; i++) {\n                let element = decodeBytes(decoded)\n                    decoded = element.buf\n                cTemp.value.push(element.value)\n            }\n        \n            \n\n\nlet d = decodeMap(decoded)\ndecoded = d.buf\nconst dTemp: { value: Map<string,number> } = { value: new Map() }\nfor (let i = 0; i < d.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeInt64(decoded)\n        decoded = value.buf\n    \n\n    d.value.set(key, value)\n}\n\n            \n\n\nlet e = decodeMap(decoded)\ndecoded = e.buf\nconst eTemp: { value: Map<string,boolean> } = { value: new Map() }\nfor (let i = 0; i < e.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeBoolean(decoded)\n        decoded = value.buf\n    \n\n    e.value.set(key, value)\n}\n\n            \n\n\nlet f = decodeMap(decoded)\ndecoded = f.buf\nconst fTemp: { value: Map<string,string> } = { value: new Map() }\nfor (let i = 0; i < f.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeString(decoded)\n        decoded = value.buf\n    \n\n    f.value.set(key, value)\n}\n\n            \n\n\nlet g = decodeMap(decoded)\ndecoded = g.buf\nconst gTemp: { value: Map<string,Uint8Array> } = { value: new Map() }\nfor (let i = 0; i < g.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeBytes(decoded)\n        decoded = value.buf\n    \n\n    g.value.set(key, value)\n}\n\n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataEdgecasesExampleMessage(\n            aTemp.value,\n            bTemp.value,\n            cTemp.value,\n            dTemp.value,\n            eTemp.value,\n            fTemp.value,\n            gTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
