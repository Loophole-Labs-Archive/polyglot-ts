(string) (len=2710) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: nested_enum_array.proto\n\n\n\nimport { Kind,decodeArray,decodeString,decodeUint32,encodeArray,encodeString,encodeUint32,} from \"polyglot-ts\"\n\n\n\n\n\n    \n        \nenum IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus {\n    UNIVERSAL = 0,\n    WEB = 1,\n    IMAGES = 2,\n    LOCAL = 3,\n    NEWS = 4,\n    PRODUCTS = 5,\n    VIDEO = 6,\n    }\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestDataNestedEnmArrayRequest {\n        constructor(\n        message: string,\n        corpus: IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[],\n        ) {\n            this._message = message\n            this._corpus = corpus\n            }\n\n        private _message: string\n\n            get message(): string {\n                return this._message\n            }\n\n            set message(message: string) {\n                this._message = message\n            }\n            \n        private _corpus: IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[]\n\n            get corpus(): IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[] {\n                return this._corpus\n            }\n\n            set corpus(corpus: IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[]) {\n                this._corpus = corpus\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.message)\n\n        \n    encoded = encodeArray(this._corpus.length, Kind.U32)\n        this._corpus.forEach((field) => {\n            encoded = encodeUint32(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataNestedEnmArrayRequest} {\n        let decoded = buf\n        \n        \n            let corpus = decodeArray(decoded)\n            decoded = corpus.buf\n            const corpusTemp: { value: IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[] } = { value: [] }\n            for (let i = 0; i < corpus.size; i++) {\n                let elementEnum = decodeUint32(decoded)\n                    const element = { value: elementEnum as IoLoopholelabsPolyglotTestDataNestedEnmArrayRequestCorpus[] }\n                    decoded = element.bufEnum\n                corpusTemp.value.push(element.value)\n            }\n        \n            let messageTemp = decodeString(decoded)\n                decoded = messageTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataNestedEnmArrayRequest(\n            messageTemp.value,\n            corpusTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
