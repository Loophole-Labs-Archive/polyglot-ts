(string) (len=2807) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: nested_enum_map.proto\n\n\n\nimport { Kind,decodeMap,decodeString,decodeUint32,encodeMap,encodeString,encodeUint32,} from \"polyglot-ts\"\n\n\n\n\n\n    \n        \nenum IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus {\n    UNIVERSAL = 0,\n    WEB = 1,\n    IMAGES = 2,\n    LOCAL = 3,\n    NEWS = 4,\n    PRODUCTS = 5,\n    VIDEO = 6,\n    }\n\n    \n    \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestDataNestedEnmMapRequest {\n        constructor(\n        message: string,\n        corpus: Map<string, IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus>,\n        ) {\n            this._message = message\n            this._corpus = corpus\n            }\n\n        private _message: string\n\n            get message(): string {\n                return this._message\n            }\n\n            set message(message: string) {\n                this._message = message\n            }\n            \n        private _corpus: Map<string, IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus>\n\n            get corpus(): Map<string, IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus> {\n                return this._corpus\n            }\n\n            set corpus(corpus: Map<string, IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus>) {\n                this._corpus = corpus\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.message)\n\n        \n    encoded = encodeMap(encoded, this._corpus.size, Kind.String, Kind.U32)\n            this._corpus.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeUint32(encoded, v as number)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataNestedEnmMapRequest} {\n        let decoded = buf\n        \n        \n            \n\n\nlet corpus = decodeMap(decoded)\ndecoded = corpus.buf\nconst corpusTemp: { value: Map<string,IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus> } = { value: new Map() }\nfor (let i = 0; i < corpus.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let valueEnum = decodeUint32(decoded)\n        const value = { value: valueEnum as IoLoopholelabsPolyglotTestDataNestedEnmMapRequestCorpus }\n        decoded = valueEnum.buf\n    \n\n    corpus.value.set(key, value)\n}\n\n            let messageTemp = decodeString(decoded)\n                decoded = messageTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataNestedEnmMapRequest(\n            messageTemp.value,\n            corpusTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
