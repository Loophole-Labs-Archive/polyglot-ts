(string) (len=2920) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: nopackage.proto\n\n\n\nimport { decodeInt32,decodeString,encodeInt32,encodeString,} from \"polyglot-ts\"\n\n\n\n\n\n    \n    \n    \n    export class User {\n        constructor(\n        name: string,\n        age: number,\n        department: Department,\n        ) {\n            this._name = name\n            this._age = age\n            this._department = department\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        private _age: number\n\n            get age(): number {\n                return this._age\n            }\n\n            set age(age: number) {\n                this._age = age\n            }\n            \n        private _department: Department\n\n            get department(): Department {\n                return this._department\n            }\n\n            set department(department: Department) {\n                this._department = department\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n        encoded = encodeInt32(encoded, this.age)\n\n        \n    encoded = this._department.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: User} {\n        let decoded = buf\n        \n        \n            let departmentTemp = Department.decode(decoded)\n                decoded = departmentTemp.buf\n            \n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n            let ageTemp = decodeInt32(decoded)\n                decoded = ageTemp.buf\n            \n\n        return { buf: decoded, value: new User(\n            nameTemp.value,\n            ageTemp.value,\n            departmentTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class Department {\n        constructor(\n        name: string,\n        ) {\n            this._name = name\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: Department} {\n        let decoded = buf\n        \n        \n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n\n        return { buf: decoded, value: new Department(\n            nameTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
