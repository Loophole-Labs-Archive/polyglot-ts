(string) (len=33596) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: complete.proto\n\n\n\nimport { Kind,decodeArray,decodeBoolean,decodeFloat64,decodeInt32,decodeInt64,decodeMap,decodeString,decodeUint32,encodeArray,encodeBoolean,encodeFloat64,encodeInt32,encodeInt64,encodeMap,encodeString,encodeUint32,} from \"polyglot-ts\"\n\n\nenum IoLoopholelabsPolyglotTestCompleteTest {\n    Potato = 0,\n    Monkey = 1,\n    }\n\n\n\n\n\n    \n        \nenum IoLoopholelabsPolyglotTestCompleteRequestCorpus {\n    UNIVERSAL = 0,\n    WEB = 1,\n    IMAGES = 2,\n    LOCAL = 3,\n    NEWS = 4,\n    PRODUCTS = 5,\n    VIDEO = 6,\n    }\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteRequest {\n        constructor(\n        message: string,\n        corpus: IoLoopholelabsPolyglotTestCompleteRequestCorpus,\n        ) {\n            this._message = message\n            this._corpus = corpus\n            }\n\n        private _message: string\n\n            get message(): string {\n                return this._message\n            }\n\n            set message(message: string) {\n                this._message = message\n            }\n            \n        private _corpus: IoLoopholelabsPolyglotTestCompleteRequestCorpus\n\n            get corpus(): IoLoopholelabsPolyglotTestCompleteRequestCorpus {\n                return this._corpus\n            }\n\n            set corpus(corpus: IoLoopholelabsPolyglotTestCompleteRequestCorpus) {\n                this._corpus = corpus\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.message)\n        encoded = encodeUint32(encoded, this.corpus as number)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteRequest} {\n        let decoded = buf\n        \n        \n            let messageTemp = decodeString(decoded)\n                decoded = messageTemp.buf\n            \n            let corpusU32 = decodeUint32(decoded)\n                const corpusTemp = { value: corpusU32 as IoLoopholelabsPolyglotTestCompleteRequestCorpus }\n                decoded = corpusU32.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteRequest(\n            messageTemp.value,\n            corpusTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteResponse {\n        constructor(\n        message: string,\n        test: IoLoopholelabsPolyglotTestCompleteData,\n        ) {\n            this._message = message\n            this._test = test\n            }\n\n        private _message: string\n\n            get message(): string {\n                return this._message\n            }\n\n            set message(message: string) {\n                this._message = message\n            }\n            \n        private _test: IoLoopholelabsPolyglotTestCompleteData\n\n            get test(): IoLoopholelabsPolyglotTestCompleteData {\n                return this._test\n            }\n\n            set test(test: IoLoopholelabsPolyglotTestCompleteData) {\n                this._test = test\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.message)\n\n        \n    encoded = this._test.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteResponse} {\n        let decoded = buf\n        \n        \n            let testTemp = IoLoopholelabsPolyglotTestCompleteData.decode(decoded)\n                decoded = testTemp.buf\n            \n            let messageTemp = decodeString(decoded)\n                decoded = messageTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteResponse(\n            messageTemp.value,\n            testTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteData {\n        constructor(\n        message: string,\n        checker: IoLoopholelabsPolyglotTestCompleteTest,\n        ) {\n            this._message = message\n            this._checker = checker\n            }\n\n        private _message: string\n\n            get message(): string {\n                return this._message\n            }\n\n            set message(message: string) {\n                this._message = message\n            }\n            \n        private _checker: IoLoopholelabsPolyglotTestCompleteTest\n\n            get checker(): IoLoopholelabsPolyglotTestCompleteTest {\n                return this._checker\n            }\n\n            set checker(checker: IoLoopholelabsPolyglotTestCompleteTest) {\n                this._checker = checker\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.message)\n        encoded = encodeUint32(encoded, this.checker as number)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteData} {\n        let decoded = buf\n        \n        \n            let messageTemp = decodeString(decoded)\n                decoded = messageTemp.buf\n            \n            let checkerU32 = decodeUint32(decoded)\n                const checkerTemp = { value: checkerU32 as IoLoopholelabsPolyglotTestCompleteTest }\n                decoded = checkerU32.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteData(\n            messageTemp.value,\n            checkerTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n        \nenum IoLoopholelabsPolyglotTestCompleteMyMessage1EnumAllowingAlias {\n    UNKNOWN = 0,\n    STARTED = 1,\n    RUNNING = 2,\n    }\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteMyMessage1 {\n        constructor(\n        ) {\n            }\n\n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteMyMessage1} {\n        let decoded = buf\n        \n        \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteMyMessage1(\n            )}\n    }\n\n    } \n\n\n    \n        \nenum IoLoopholelabsPolyglotTestCompleteMyMessage2EnumNotAllowingAlias {\n    UNKNOWN = 0,\n    STARTED = 1,\n    }\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteMyMessage2 {\n        constructor(\n        ) {\n            }\n\n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteMyMessage2} {\n        let decoded = buf\n        \n        \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteMyMessage2(\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n            \n    \n    export class IoLoopholelabsPolyglotTestCompleteSearchResponseResult {\n        constructor(\n        url: string,\n        title: string,\n        snippets: string[],\n        ) {\n            this._url = url\n            this._title = title\n            this._snippets = snippets\n            }\n\n        private _url: string\n\n            get url(): string {\n                return this._url\n            }\n\n            set url(url: string) {\n                this._url = url\n            }\n            \n        private _title: string\n\n            get title(): string {\n                return this._title\n            }\n\n            set title(title: string) {\n                this._title = title\n            }\n            \n        private _snippets: string[]\n\n            get snippets(): string[] {\n                return this._snippets\n            }\n\n            set snippets(snippets: string[]) {\n                this._snippets = snippets\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.url)\n        encoded = encodeString(encoded, this.title)\n\n        \n    encoded = encodeArray(this._snippets.length, Kind.String)\n        this._snippets.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteSearchResponseResult} {\n        let decoded = buf\n        \n        \n            let snippets = decodeArray(decoded)\n            decoded = snippets.buf\n            const snippetsTemp: { value: string[] } = { value: [] }\n            for (let i = 0; i < snippets.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                snippetsTemp.value.push(element.value)\n            }\n        \n            let urlTemp = decodeString(decoded)\n                decoded = urlTemp.buf\n            \n            let titleTemp = decodeString(decoded)\n                decoded = titleTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteSearchResponseResult(\n            urlTemp.value,\n            titleTemp.value,\n            snippetsTemp.value,\n            )}\n    }\n\n    } \n\n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteSearchResponse {\n        constructor(\n        results: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[],\n        results2: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[],\n        snippets: string[],\n        snippets2: string[],\n        ) {\n            this._results = results\n            this._results2 = results2\n            this._snippets = snippets\n            this._snippets2 = snippets2\n            }\n\n        private _results: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[]\n\n            get results(): IoLoopholelabsPolyglotTestCompleteSearchResponseResult[] {\n                return this._results\n            }\n\n            set results(results: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[]) {\n                this._results = results\n            }\n            \n        private _results2: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[]\n\n            get results2(): IoLoopholelabsPolyglotTestCompleteSearchResponseResult[] {\n                return this._results2\n            }\n\n            set results2(results2: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[]) {\n                this._results2 = results2\n            }\n            \n        private _snippets: string[]\n\n            get snippets(): string[] {\n                return this._snippets\n            }\n\n            set snippets(snippets: string[]) {\n                this._snippets = snippets\n            }\n            \n        private _snippets2: string[]\n\n            get snippets2(): string[] {\n                return this._snippets2\n            }\n\n            set snippets2(snippets2: string[]) {\n                this._snippets2 = snippets2\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeArray(encoded, this._results.length, Kind.Any)\n        this._results.forEach((field) => {\n            encoded = field.encode(encoded)\n        })\n        encoded = encodeArray(encoded, this._results2.length, Kind.Any)\n        this._results2.forEach((field) => {\n            encoded = field.encode(encoded)\n        })\n        encoded = encodeArray(this._snippets.length, Kind.String)\n        this._snippets.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        encoded = encodeArray(this._snippets2.length, Kind.String)\n        this._snippets2.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteSearchResponse} {\n        let decoded = buf\n        \n        \n            let results = decodeArray(decoded)\n            decoded = results.buf\n            const resultsTemp: { value: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[] } = { value: [] }\n            for (let i = 0; i < results.size; i++) {\n                let element = IoLoopholelabsPolyglotTestCompleteSearchResponseResult.decode(decoded)\n                    decoded = element.buf\n                resultsTemp.value.push(element.value)\n            }\n        \n            let results2 = decodeArray(decoded)\n            decoded = results2.buf\n            const results2Temp: { value: IoLoopholelabsPolyglotTestCompleteSearchResponseResult[] } = { value: [] }\n            for (let i = 0; i < results2.size; i++) {\n                let element = IoLoopholelabsPolyglotTestCompleteSearchResponseResult.decode(decoded)\n                    decoded = element.buf\n                results2Temp.value.push(element.value)\n            }\n        \n            let snippets = decodeArray(decoded)\n            decoded = snippets.buf\n            const snippetsTemp: { value: string[] } = { value: [] }\n            for (let i = 0; i < snippets.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                snippetsTemp.value.push(element.value)\n            }\n        \n            let snippets2 = decodeArray(decoded)\n            decoded = snippets2.buf\n            const snippets2Temp: { value: string[] } = { value: [] }\n            for (let i = 0; i < snippets2.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                snippets2Temp.value.push(element.value)\n            }\n        \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteSearchResponse(\n            resultsTemp.value,\n            results2Temp.value,\n            snippetsTemp.value,\n            snippets2Temp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteResulting {\n        constructor(\n        url: string,\n        title: string,\n        snippets: string[],\n        ) {\n            this._url = url\n            this._title = title\n            this._snippets = snippets\n            }\n\n        private _url: string\n\n            get url(): string {\n                return this._url\n            }\n\n            set url(url: string) {\n                this._url = url\n            }\n            \n        private _title: string\n\n            get title(): string {\n                return this._title\n            }\n\n            set title(title: string) {\n                this._title = title\n            }\n            \n        private _snippets: string[]\n\n            get snippets(): string[] {\n                return this._snippets\n            }\n\n            set snippets(snippets: string[]) {\n                this._snippets = snippets\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.url)\n        encoded = encodeString(encoded, this.title)\n\n        \n    encoded = encodeArray(this._snippets.length, Kind.String)\n        this._snippets.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteResulting} {\n        let decoded = buf\n        \n        \n            let snippets = decodeArray(decoded)\n            decoded = snippets.buf\n            const snippetsTemp: { value: string[] } = { value: [] }\n            for (let i = 0; i < snippets.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                snippetsTemp.value.push(element.value)\n            }\n        \n            let urlTemp = decodeString(decoded)\n                decoded = urlTemp.buf\n            \n            let titleTemp = decodeString(decoded)\n                decoded = titleTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteResulting(\n            urlTemp.value,\n            titleTemp.value,\n            snippetsTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteSomeOtherMessage {\n        constructor(\n        result: IoLoopholelabsPolyglotTestCompleteSearchResponseResult,\n        ) {\n            this._result = result\n            }\n\n        private _result: IoLoopholelabsPolyglotTestCompleteSearchResponseResult\n\n            get result(): IoLoopholelabsPolyglotTestCompleteSearchResponseResult {\n                return this._result\n            }\n\n            set result(result: IoLoopholelabsPolyglotTestCompleteSearchResponseResult) {\n                this._result = result\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = this._result.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteSomeOtherMessage} {\n        let decoded = buf\n        \n        \n            let resultTemp = IoLoopholelabsPolyglotTestCompleteSearchResponseResult.decode(decoded)\n                decoded = resultTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteSomeOtherMessage(\n            resultTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n            \n    \n        \n        \n            \n    \n    export class IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner {\n        constructor(\n        ival: number,\n        booly: boolean,\n        ) {\n            this._ival = ival\n            this._booly = booly\n            }\n\n        private _ival: number\n\n            get ival(): number {\n                return this._ival\n            }\n\n            set ival(ival: number) {\n                this._ival = ival\n            }\n            \n        private _booly: boolean\n\n            get booly(): boolean {\n                return this._booly\n            }\n\n            set booly(booly: boolean) {\n                this._booly = booly\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeInt64(encoded, this.ival)\n        encoded = encodeBoolean(encoded, this.booly)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner} {\n        let decoded = buf\n        \n        \n            let ivalTemp = decodeInt64(decoded)\n                decoded = ivalTemp.buf\n            \n            let boolyTemp = decodeBoolean(decoded)\n                decoded = boolyTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner(\n            ivalTemp.value,\n            boolyTemp.value,\n            )}\n    }\n\n    } \n\n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteOuterMiddleAA {\n        constructor(\n        inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner,\n        ) {\n            this._inner = inner\n            }\n\n        private _inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner\n\n            get inner(): IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner {\n                return this._inner\n            }\n\n            set inner(inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner) {\n                this._inner = inner\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = this._inner.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteOuterMiddleAA} {\n        let decoded = buf\n        \n        \n            let innerTemp = IoLoopholelabsPolyglotTestCompleteOuterMiddleAAInner.decode(decoded)\n                decoded = innerTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteOuterMiddleAA(\n            innerTemp.value,\n            )}\n    }\n\n    } \n\n        \n    \n        \n        \n            \n    \n        \n        \n            \n    \n    export class IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner {\n        constructor(\n        ival: number,\n        booly: boolean,\n        ) {\n            this._ival = ival\n            this._booly = booly\n            }\n\n        private _ival: number\n\n            get ival(): number {\n                return this._ival\n            }\n\n            set ival(ival: number) {\n                this._ival = ival\n            }\n            \n        private _booly: boolean\n\n            get booly(): boolean {\n                return this._booly\n            }\n\n            set booly(booly: boolean) {\n                this._booly = booly\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeInt32(encoded, this.ival)\n        encoded = encodeBoolean(encoded, this.booly)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner} {\n        let decoded = buf\n        \n        \n            let ivalTemp = decodeInt32(decoded)\n                decoded = ivalTemp.buf\n            \n            let boolyTemp = decodeBoolean(decoded)\n                decoded = boolyTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner(\n            ivalTemp.value,\n            boolyTemp.value,\n            )}\n    }\n\n    } \n\n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteOuterMiddleBB {\n        constructor(\n        inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner,\n        ) {\n            this._inner = inner\n            }\n\n        private _inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner\n\n            get inner(): IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner {\n                return this._inner\n            }\n\n            set inner(inner: IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner) {\n                this._inner = inner\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = this._inner.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteOuterMiddleBB} {\n        let decoded = buf\n        \n        \n            let innerTemp = IoLoopholelabsPolyglotTestCompleteOuterMiddleBBInner.decode(decoded)\n                decoded = innerTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteOuterMiddleBB(\n            innerTemp.value,\n            )}\n    }\n\n    } \n\n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteOuter {\n        constructor(\n        a: IoLoopholelabsPolyglotTestCompleteOuterMiddleAA,\n        b: IoLoopholelabsPolyglotTestCompleteOuterMiddleBB,\n        ) {\n            this._a = a\n            this._b = b\n            }\n\n        private _a: IoLoopholelabsPolyglotTestCompleteOuterMiddleAA\n\n            get a(): IoLoopholelabsPolyglotTestCompleteOuterMiddleAA {\n                return this._a\n            }\n\n            set a(a: IoLoopholelabsPolyglotTestCompleteOuterMiddleAA) {\n                this._a = a\n            }\n            \n        private _b: IoLoopholelabsPolyglotTestCompleteOuterMiddleBB\n\n            get b(): IoLoopholelabsPolyglotTestCompleteOuterMiddleBB {\n                return this._b\n            }\n\n            set b(b: IoLoopholelabsPolyglotTestCompleteOuterMiddleBB) {\n                this._b = b\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = this._a.encode(encoded);\n        encoded = this._b.encode(encoded);\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteOuter} {\n        let decoded = buf\n        \n        \n            let aTemp = IoLoopholelabsPolyglotTestCompleteOuterMiddleAA.decode(decoded)\n                decoded = aTemp.buf\n            \n            let bTemp = IoLoopholelabsPolyglotTestCompleteOuterMiddleBB.decode(decoded)\n                decoded = bTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteOuter(\n            aTemp.value,\n            bTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteSampleMessage {\n        constructor(\n        name: string,\n        potato: string,\n        ) {\n            this._name = name\n            this._potato = potato\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        private _potato: string\n\n            get potato(): string {\n                return this._potato\n            }\n\n            set potato(potato: string) {\n                this._potato = potato\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n        encoded = encodeString(encoded, this.potato)\n\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteSampleMessage} {\n        let decoded = buf\n        \n        \n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n            let potatoTemp = decodeString(decoded)\n                decoded = potatoTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteSampleMessage(\n            nameTemp.value,\n            potatoTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteTestPotato {\n        constructor(\n        prices: Map<string, IoLoopholelabsPolyglotTestCompleteTest>,\n        ) {\n            this._prices = prices\n            }\n\n        private _prices: Map<string, IoLoopholelabsPolyglotTestCompleteTest>\n\n            get prices(): Map<string, IoLoopholelabsPolyglotTestCompleteTest> {\n                return this._prices\n            }\n\n            set prices(prices: Map<string, IoLoopholelabsPolyglotTestCompleteTest>) {\n                this._prices = prices\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeMap(encoded, this._prices.size, Kind.String, Kind.U32)\n            this._prices.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeUint32(encoded, v as number)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteTestPotato} {\n        let decoded = buf\n        \n        \n            \n\n\nlet prices = decodeMap(decoded)\ndecoded = prices.buf\nconst pricesTemp: { value: Map<string,IoLoopholelabsPolyglotTestCompleteTest> } = { value: new Map() }\nfor (let i = 0; i < prices.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let valueEnum = decodeUint32(decoded)\n        const value = { value: valueEnum as IoLoopholelabsPolyglotTestCompleteTest }\n        decoded = valueEnum.buf\n    \n\n    prices.value.set(key, value)\n}\n\n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteTestPotato(\n            pricesTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteStockPrices {\n        constructor(\n        prices: Map<string, number>,\n        ) {\n            this._prices = prices\n            }\n\n        private _prices: Map<string, number>\n\n            get prices(): Map<string, number> {\n                return this._prices\n            }\n\n            set prices(prices: Map<string, number>) {\n                this._prices = prices\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeMap(encoded, this._prices.size, Kind.String, Kind.F64)\n            this._prices.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeFloat64(encoded, v)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteStockPrices} {\n        let decoded = buf\n        \n        \n            \n\n\nlet prices = decodeMap(decoded)\ndecoded = prices.buf\nconst pricesTemp: { value: Map<string,number> } = { value: new Map() }\nfor (let i = 0; i < prices.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeFloat64(decoded)\n        decoded = value.buf\n    \n\n    prices.value.set(key, value)\n}\n\n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteStockPrices(\n            pricesTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestCompleteStockPricesWrapper {\n        constructor(\n        sPrices: IoLoopholelabsPolyglotTestCompleteStockPrices[],\n        ) {\n            this._sPrices = sPrices\n            }\n\n        private _sPrices: IoLoopholelabsPolyglotTestCompleteStockPrices[]\n\n            get sPrices(): IoLoopholelabsPolyglotTestCompleteStockPrices[] {\n                return this._sPrices\n            }\n\n            set sPrices(sPrices: IoLoopholelabsPolyglotTestCompleteStockPrices[]) {\n                this._sPrices = sPrices\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeArray(encoded, this._sPrices.length, Kind.Any)\n        this._sPrices.forEach((field) => {\n            encoded = field.encode(encoded)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteStockPricesWrapper} {\n        let decoded = buf\n        \n        \n            let sPrices = decodeArray(decoded)\n            decoded = sPrices.buf\n            const sPricesTemp: { value: IoLoopholelabsPolyglotTestCompleteStockPrices[] } = { value: [] }\n            for (let i = 0; i < sPrices.size; i++) {\n                let element = IoLoopholelabsPolyglotTestCompleteStockPrices.decode(decoded)\n                    decoded = element.buf\n                sPricesTemp.value.push(element.value)\n            }\n        \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteStockPricesWrapper(\n            sPricesTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestCompleteStockPricesSuperWrap {\n        constructor(\n        prices: Map<string, IoLoopholelabsPolyglotTestCompleteStockPricesWrapper>,\n        ) {\n            this._prices = prices\n            }\n\n        private _prices: Map<string, IoLoopholelabsPolyglotTestCompleteStockPricesWrapper>\n\n            get prices(): Map<string, IoLoopholelabsPolyglotTestCompleteStockPricesWrapper> {\n                return this._prices\n            }\n\n            set prices(prices: Map<string, IoLoopholelabsPolyglotTestCompleteStockPricesWrapper>) {\n                this._prices = prices\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n\n        \n    encoded = encodeMap(encoded, this._prices.size, Kind.String, Kind.Any)\n            this._prices.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = v.encode(encoded)\n            })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestCompleteStockPricesSuperWrap} {\n        let decoded = buf\n        \n        \n            \n\n\nlet prices = decodeMap(decoded)\ndecoded = prices.buf\nconst pricesTemp: { value: Map<string,IoLoopholelabsPolyglotTestCompleteStockPricesWrapper> } = { value: new Map() }\nfor (let i = 0; i < prices.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = IoLoopholelabsPolyglotTestCompleteStockPricesWrapper.decode(decoded)\n        decoded = value.buf\n    \n\n    prices.value.set(key, value)\n}\n\n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestCompleteStockPricesSuperWrap(\n            pricesTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
