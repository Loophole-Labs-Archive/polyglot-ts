(string) (len=3503) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: array_enum.proto\n\n\n\nimport { Kind,decodeArray,decodeString,decodeUint32,encodeArray,encodeString,encodeUint32,} from \"polyglot-ts\"\n\n\nenum IoLoopholelabsPolyglotTestDataArrayEnmMessageType {\n    MESSAGE_TYPE_A = 0,\n    MESSAGE_TYPE_B = 1,\n    MESSAGE_TYPE_C = 2,\n    }\n\n\n\n\n\n    \n    \n    \n    export class IoLoopholelabsPolyglotTestDataArrayEnmExampleMessage {\n        constructor(\n        name: string,\n        addresses: string[],\n        patients: IoLoopholelabsPolyglotTestDataArrayEnmMessageType[],\n        ) {\n            this._name = name\n            this._addresses = addresses\n            this._patients = patients\n            }\n\n        private _name: string\n\n            get name(): string {\n                return this._name\n            }\n\n            set name(name: string) {\n                this._name = name\n            }\n            \n        private _addresses: string[]\n\n            get addresses(): string[] {\n                return this._addresses\n            }\n\n            set addresses(addresses: string[]) {\n                this._addresses = addresses\n            }\n            \n        private _patients: IoLoopholelabsPolyglotTestDataArrayEnmMessageType[]\n\n            get patients(): IoLoopholelabsPolyglotTestDataArrayEnmMessageType[] {\n                return this._patients\n            }\n\n            set patients(patients: IoLoopholelabsPolyglotTestDataArrayEnmMessageType[]) {\n                this._patients = patients\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.name)\n\n        \n    encoded = encodeArray(this._addresses.length, Kind.String)\n        this._addresses.forEach((field) => {\n            encoded = encodeString(encoded, field)\n        })\n        encoded = encodeArray(this._patients.length, Kind.U32)\n        this._patients.forEach((field) => {\n            encoded = encodeUint32(encoded, field)\n        })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataArrayEnmExampleMessage} {\n        let decoded = buf\n        \n        \n            let addresses = decodeArray(decoded)\n            decoded = addresses.buf\n            const addressesTemp: { value: string[] } = { value: [] }\n            for (let i = 0; i < addresses.size; i++) {\n                let element = decodeString(decoded)\n                    decoded = element.buf\n                addressesTemp.value.push(element.value)\n            }\n        \n            let patients = decodeArray(decoded)\n            decoded = patients.buf\n            const patientsTemp: { value: IoLoopholelabsPolyglotTestDataArrayEnmMessageType[] } = { value: [] }\n            for (let i = 0; i < patients.size; i++) {\n                let elementEnum = decodeUint32(decoded)\n                    const element = { value: elementEnum as IoLoopholelabsPolyglotTestDataArrayEnmMessageType[] }\n                    decoded = element.bufEnum\n                patientsTemp.value.push(element.value)\n            }\n        \n            let nameTemp = decodeString(decoded)\n                decoded = nameTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataArrayEnmExampleMessage(\n            nameTemp.value,\n            addressesTemp.value,\n            patientsTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
