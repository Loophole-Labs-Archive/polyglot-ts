(string) (len=8468) "\n// Code generated by polyglot-ts v0.4.0, DO NOT EDIT.\n// source: http.proto\n\n\n\nimport { Kind,decodeBytes,decodeMap,decodeString,decodeUint32,decodeUint64,encodeBytes,encodeMap,encodeString,encodeUint32,encodeUint64,} from \"polyglot-ts\"\n\n\n\n\n\n    \n    \n    \n        \n        \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestDataHttpRequest {\n        constructor(\n        method: string,\n        url: string,\n        headers: Map<string, string>,\n        length: number,\n        origin: string,\n        query: Map<string, string>,\n        protocol: string,\n        ip: string,\n        body: Uint8Array,\n        ) {\n            this._method = method\n            this._url = url\n            this._headers = headers\n            this._length = length\n            this._origin = origin\n            this._query = query\n            this._protocol = protocol\n            this._ip = ip\n            this._body = body\n            }\n\n        private _method: string\n\n            get method(): string {\n                return this._method\n            }\n\n            set method(method: string) {\n                this._method = method\n            }\n            \n        private _url: string\n\n            get url(): string {\n                return this._url\n            }\n\n            set url(url: string) {\n                this._url = url\n            }\n            \n        private _headers: Map<string, string>\n\n            get headers(): Map<string, string> {\n                return this._headers\n            }\n\n            set headers(headers: Map<string, string>) {\n                this._headers = headers\n            }\n            \n        private _length: number\n\n            get length(): number {\n                return this._length\n            }\n\n            set length(length: number) {\n                this._length = length\n            }\n            \n        private _origin: string\n\n            get origin(): string {\n                return this._origin\n            }\n\n            set origin(origin: string) {\n                this._origin = origin\n            }\n            \n        private _query: Map<string, string>\n\n            get query(): Map<string, string> {\n                return this._query\n            }\n\n            set query(query: Map<string, string>) {\n                this._query = query\n            }\n            \n        private _protocol: string\n\n            get protocol(): string {\n                return this._protocol\n            }\n\n            set protocol(protocol: string) {\n                this._protocol = protocol\n            }\n            \n        private _ip: string\n\n            get ip(): string {\n                return this._ip\n            }\n\n            set ip(ip: string) {\n                this._ip = ip\n            }\n            \n        private _body: Uint8Array\n\n            get body(): Uint8Array {\n                return this._body\n            }\n\n            set body(body: Uint8Array) {\n                this._body = body\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeString(encoded, this.method)\n        encoded = encodeString(encoded, this.url)\n        encoded = encodeUint64(encoded, this.length)\n        encoded = encodeString(encoded, this.origin)\n        encoded = encodeString(encoded, this.protocol)\n        encoded = encodeString(encoded, this.ip)\n        encoded = encodeBytes(encoded, this.body)\n\n        \n    encoded = encodeMap(encoded, this._headers.size, Kind.String, Kind.String)\n            this._headers.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeString(encoded, v)\n                })\n        encoded = encodeMap(encoded, this._query.size, Kind.String, Kind.String)\n            this._query.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeString(encoded, v)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataHttpRequest} {\n        let decoded = buf\n        \n        \n            \n\n\nlet headers = decodeMap(decoded)\ndecoded = headers.buf\nconst headersTemp: { value: Map<string,string> } = { value: new Map() }\nfor (let i = 0; i < headers.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeString(decoded)\n        decoded = value.buf\n    \n\n    headers.value.set(key, value)\n}\n\n            \n\n\nlet query = decodeMap(decoded)\ndecoded = query.buf\nconst queryTemp: { value: Map<string,string> } = { value: new Map() }\nfor (let i = 0; i < query.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeString(decoded)\n        decoded = value.buf\n    \n\n    query.value.set(key, value)\n}\n\n            let methodTemp = decodeString(decoded)\n                decoded = methodTemp.buf\n            \n            let urlTemp = decodeString(decoded)\n                decoded = urlTemp.buf\n            \n            let lengthTemp = decodeUint64(decoded)\n                decoded = lengthTemp.buf\n            \n            let originTemp = decodeString(decoded)\n                decoded = originTemp.buf\n            \n            let protocolTemp = decodeString(decoded)\n                decoded = protocolTemp.buf\n            \n            let ipTemp = decodeString(decoded)\n                decoded = ipTemp.buf\n            \n            let bodyTemp = decodeBytes(decoded)\n                decoded = bodyTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataHttpRequest(\n            methodTemp.value,\n            urlTemp.value,\n            lengthTemp.value,\n            originTemp.value,\n            protocolTemp.value,\n            ipTemp.value,\n            bodyTemp.value,\n            headersTemp.value,\n            queryTemp.value,\n            )}\n    }\n\n    } \n\n\n    \n    \n    \n        \n        \n    \n    export class IoLoopholelabsPolyglotTestDataHttpResponse {\n        constructor(\n        headers: Map<string, string>,\n        status: number,\n        body: Uint8Array,\n        ) {\n            this._headers = headers\n            this._status = status\n            this._body = body\n            }\n\n        private _headers: Map<string, string>\n\n            get headers(): Map<string, string> {\n                return this._headers\n            }\n\n            set headers(headers: Map<string, string>) {\n                this._headers = headers\n            }\n            \n        private _status: number\n\n            get status(): number {\n                return this._status\n            }\n\n            set status(status: number) {\n                this._status = status\n            }\n            \n        private _body: Uint8Array\n\n            get body(): Uint8Array {\n                return this._body\n            }\n\n            set body(body: Uint8Array) {\n                this._body = body\n            }\n            \n        \n    encode(buf: Uint8Array): Uint8Array {\n        let encoded = buf\n        \n        \n        encoded = encodeUint32(encoded, this.status)\n        encoded = encodeBytes(encoded, this.body)\n\n        \n    encoded = encodeMap(encoded, this._headers.size, Kind.String, Kind.String)\n            this._headers.forEach((v, k) => {\n            encoded = encodeString(encoded, k)\n                encoded = encodeString(encoded, v)\n                })\n        \n        \n        return encoded\n    }\n\n\n        \n    static decode(buf: Uint8Array): { buf: Uint8Array, value: IoLoopholelabsPolyglotTestDataHttpResponse} {\n        let decoded = buf\n        \n        \n            \n\n\nlet headers = decodeMap(decoded)\ndecoded = headers.buf\nconst headersTemp: { value: Map<string,string> } = { value: new Map() }\nfor (let i = 0; i < headers.size; i++) {\n    let key = decodeString(decoded)\n        decoded = key.buf\n    \n\n    let value = decodeString(decoded)\n        decoded = value.buf\n    \n\n    headers.value.set(key, value)\n}\n\n            let statusTemp = decodeUint32(decoded)\n                decoded = statusTemp.buf\n            \n            let bodyTemp = decodeBytes(decoded)\n                decoded = bodyTemp.buf\n            \n\n        return { buf: decoded, value: new IoLoopholelabsPolyglotTestDataHttpResponse(\n            statusTemp.value,\n            bodyTemp.value,\n            headersTemp.value,\n            )}\n    }\n\n    } \n\n\n\n"
